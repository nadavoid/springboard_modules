<?php
/**
 * @file
 * Install functions for Springboard Group.
 */

/**
 * Implements hook_install().
 */
function springboard_group_install() {

  module_load_include('inc', 'springboard_group', 'includes/install/springboard_group.install_content_type');
  _springboard_group_install_content_type();

  // Add the og_user_node field to the user profile's springboard admin group.
  $field_group = field_group_load_field_group('group_profile_admin', 'user', 'user', 'form');
  $table = 'field_group';
  if ($field_group) {
    $field_group->children[] = 'og_user_node';
    ctools_export_crud_save($table, $field_group);
  }

  // Update og_user_node field so that display is set to
  // hidden for webform user component creation.
  $instance_info = field_info_instance(
    'user',
    'og_user_node',
    'user'
  );
  foreach ($instance_info['display'] as &$display) {
    $display['label'] = 'hidden';
    $display['type'] = 'hidden';
  }
  field_update_instance($instance_info);

}

function springboard_group_field_schema($field) {
  $columns = array(
    'url' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE),
    'fid' => array(
      'description' => 'The {file_managed}.fid being referenced in this field.',
      'type' => 'int',
      'not null' => FALSE,
      'unsigned' => TRUE,
    ),
    'alt' => array(
      'description' => "Alternative image text, for the image's 'alt' attribute.",
      'type' => 'varchar',
      'length' => 512,
      'not null' => FALSE,
    ),
    'title' => array(
      'description' => "Image title text, for the image's 'title' attribute.",
      'type' => 'varchar',
      'length' => 1024,
      'not null' => FALSE,
    ),
    'width' => array(
      'description' => 'The width of the image in pixels.',
      'type' => 'int',
      'unsigned' => TRUE,
    ),
    'height' => array(
      'description' => 'The height of the image in pixels.',
      'type' => 'int',
      'unsigned' => TRUE,
    ),
  );
  $indexes = array(
    'url' => array('url'),
  );
  return array(
    'columns' => $columns,
    'indexes' => $indexes,
  );
}

function springboard_group_enable() {
  $page = page_manager_get_page_cache('node_view');
  $function = ctools_plugin_get_function($page->subtask, "enable callback");
  $function($page, FALSE);
  menu_rebuild();
  variable_set('og_group_manager_full_access', FALSE);
  variable_set('og_group_manager_default_rids_node_springboard_group', array(3 => 3));
  variable_set('og_node_access_strict', 0);
  $context = variable_get('og_context_negotiation_group_context', array());
  $context = array_merge($context, array('springboard_group' => array()));
  variable_set('og_context_negotiation_group_context', $context);
}