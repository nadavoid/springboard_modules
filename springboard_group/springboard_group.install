<?php
/**
 * @file
 * Install functions for Springboard Group.
 */
/**
 * Implements hook_install().
 */
function springboard_group_install() {

  module_load_include('inc', 'springboard_group', 'includes/install/springboard_group.install_content_type');
  module_load_include('inc', 'springboard_group', 'includes/install/springboard_group.install_permissions');

  _springboard_group_install_content_type();
  _springboard_group_install_permissions();

  // Add the og_user_node field to the user profile's springboard admin group.
  $field_group = field_group_load_field_group('group_profile_admin', 'user', 'user', 'form');
  $table = 'field_group';
  if ($field_group) {
    $field_group->children[] = 'og_user_node';
    ctools_export_crud_save($table, $field_group);
  }

  // Update og_user_node field so that display is set to
  // hidden so it doesn't cause a problemfor webform user component creation.
  $instance_info = field_info_instance(
    'user',
    'og_user_node',
    'user'
  );
  foreach ($instance_info['display'] as &$display) {
    $display['label'] = 'hidden';
    $display['type'] = 'hidden';
  }
  field_update_instance($instance_info);

}

/**
 * Implements hook_field_schema().
 *
 * @todo For social media icons if wee implement a field type.
 */
function springboard_group_field_schema($field) {
  $columns = array(
    'url' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE),
    'fid' => array(
      'description' => 'The {file_managed}.fid being referenced in this field.',
      'type' => 'int',
      'not null' => FALSE,
      'unsigned' => TRUE,
    ),
    'alt' => array(
      'description' => "Alternative image text, for the image's 'alt' attribute.",
      'type' => 'varchar',
      'length' => 512,
      'not null' => FALSE,
    ),
    'title' => array(
      'description' => "Image title text, for the image's 'title' attribute.",
      'type' => 'varchar',
      'length' => 1024,
      'not null' => FALSE,
    ),
    'width' => array(
      'description' => 'The width of the image in pixels.',
      'type' => 'int',
      'unsigned' => TRUE,
    ),
    'height' => array(
      'description' => 'The height of the image in pixels.',
      'type' => 'int',
      'unsigned' => TRUE,
    ),
  );
  $indexes = array(
    'url' => array('url'),
  );
  return array(
    'columns' => $columns,
    'indexes' => $indexes,
  );
}

/**
 * Implements hook_enable().
 */
function springboard_group_enable() {

  // Set up the page manager template for group nodes.
  $page = page_manager_get_page_cache('node_view');
  $function = ctools_plugin_get_function($page->subtask, "enable callback");
  $function($page, FALSE);
  menu_rebuild();

  // Set some default OG variables.
  // Don't let group manager be exempt from group content access permissions.
  variable_set('og_group_manager_full_access', FALSE);
  // Gives the group author manager permissions in the group.
  variable_set('og_group_manager_default_rids_node_springboard_group', array(3 => 3));
  // Sets OG node access as strict.
  variable_set('og_node_access_strict', 1);
  // Sets a custom view as the default member administration view.
  variable_set('og_ui_admin_people_view', 'springboard_group_member_admin:default');

  // Activate Springboard Group's custom og_context negotiator.
  $context = variable_get('og_context_negotiation_group_context', array());
  $context = array_merge($context, array('springboard_group' => array()));
  variable_set('og_context_negotiation_group_context', $context);
}

/**
 * Implements hook_update_N().
 *
 * Update Springboard Groups field instances to be displayed on teaser node view.
 */

function springboard_group_update_7001() {
  module_load_include('inc', 'springboard_group', 'includes/install/springboard_group.install_fields');
  $instances = springboard_group_field_default_field_instances();
  foreach($instances as $instance) {
    field_update_instance($instance);
  }
}

/**
 * Update permissions to be under purview of their respective module.
 */

function springboard_group_update_7002() {
  $old_webform_perms = db_query('
    SELECT * FROM {og_role_permission}
    WHERE module = :mod
    AND permission LIKE :webform',
      array(':mod' => 'springboard_group', ':webform' => '%' . db_like('webform') . '%')
    );
   foreach ($old_webform_perms as $perm) {
     db_update('og_role_permission')
       ->fields(array(
         'module' => 'webform',
       ))
       ->condition('rid', $perm->rid)
       ->condition('permission', $perm->permission)
       ->execute();
   }

  $old_payment_perms = db_query('
    SELECT * FROM {og_role_permission}
    WHERE module = :mod
    AND permission LIKE :payment',
    array(':mod' => 'springboard_group', ':payment' => '%' . db_like('payment') . '%')
  );
  foreach ($old_payment_perms as $perm) {
    db_update('og_role_permission')
      ->fields(array(
        'permission' => 'edit payment method in springboard group',
        'module' => 'commerce_payment',
      ))
      ->condition('rid', $perm->rid)
      ->condition('permission', $perm->permission)
      ->execute();
  }
}