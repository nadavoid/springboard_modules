<?php

/**
 * @file
 * Integrate Springboard Groups with Springboard Advocacy.
 */

require_once __DIR__ . '/includes/springboard_group_advocacy.dashboard.inc';
require_once __DIR__ . '/includes/springboard_group_advocacy.node.inc';
require_once __DIR__ . '/includes/springboard_group_advocacy.node_form.inc';
require_once __DIR__ . '/includes/springboard_group_advocacy.subscription.inc';

/**
 * Implements hook_views_api().
 */
function springboard_group_advocacy_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'springboard_group_advocacy') . '/includes/views',
  );
}

/**
 * Implements hook_form_alter().
 *
 * Add additional group-specific drupal settings for the sba_target_search.js
 * file to use while searching and adding targets.
 */
function springboard_group_advocacy_form_alter(&$form, &$form_state, $form_id) {

  $types = array(
    'sba_message_edit_form',
    'springboard_target_edit_custom_groups_form',
    'springboard_target_create_custom_groups_form',
  );

  if (in_array($form_id, $types)) {

    $api_call = springboard_advocacy_api_call();
    $subscription = $api_call->getSubscription();

    if (!empty($subscription['is_grouped'])) {
      $group_settings = array(
        'sbaSubscriptionIsGrouped' => TRUE,
        'sbaAllowedStates' => $subscription['states_custom'],
      );
    }
    else {
      $group_settings = array('sbaSubscriptionIsGrouped' => FALSE);
    }
    $form['#attached']['js'][] = array(
      'data' => $group_settings,
      'type' => 'setting',
    );
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Remove the group selector from the custom target and group edit pages.
 */
function springboard_group_advocacy_preprocess_page(&$vars) {
  $path = current_path();
  $omit = strpos($path, '/add') !== FALSE ? TRUE : strpos($path, '/edit') !== FALSE;
  $og_paths = springboard_group_advocacy_springboard_group_context_menu_paths();
  if ((!in_array($path, $og_paths) || $omit) && isset($_SESSION['springboard_group_context_multiple'])) {
    unset($vars['page']['content']['system_main']['selector']);
  }
}

/**
 * Implements hook_springboard_group_context_menu_path().
 *
 * Define the context paths for hook_og_context_negotiation_info().
 *
 * Also called from springboard_group_advocacy_preprocess_page().
 */
function springboard_group_advocacy_springboard_group_context_menu_paths() {

  $paths = &drupal_static(__FUNCTION__);
  if (!isset($paths)) {
    $groups_enabled_types = springboard_group_get_grouped_types();
    $paths = array();
    if (isset($groups_enabled_types['node']['sba_message_action']) || isset($groups_enabled_types['node']['sba_social_action'])) {
      array_push($paths, 'admin/springboard/advocacy/targets');
      array_push($paths, 'admin/springboard/advocacy/actions');
      array_push($paths, 'admin/springboard/advocacy/targets/custom-targets');
      array_push($paths, 'admin/springboard/advocacy/targets/custom-groups');

    }
    if (isset($groups_enabled_types['node']['sba_message_action'])) {
      array_push($paths, 'admin/springboard/advocacy/message-actions/all');
    }
    if (isset($groups_enabled_types['node']['sba_social_action'])) {
      array_push($paths, 'admin/springboard/advocacy/social-actions/all');
    }
  }

  return $paths;
}

/**
 * Implements hook_og_permission().
 */
function springboard_group_advocacy_og_permission() {
  return array(
    'administer advocacy group subscription' => array(
      'title' => t('Administer advocacy subscription'),
      'description' => t("Change the advocacy subscription level of a group."),
      'roles' => array(OG_AUTHENTICATED_ROLE),
      'default role' => array(),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function springboard_group_advocacy_menu_alter(&$items) {

  $paths = array(
    'admin/springboard/advocacy/actions',
    'admin/springboard/advocacy/message-actions/all',
    'admin/springboard/advocacy/social-actions/all',
    'admin/springboard/advocacy/petitions/all',
  );

  foreach ($items as $path => $item) {
    if (in_array($path, $paths)) {
      if (isset($item['access callback']) && $item['access callback'] == 'springboard_advocacy_user_can_create_advocacy_type') {
        $items[$path]['access callback'] = 'springboard_group_advocacy_user_can_create_advocacy_type';
      }
    }
  }

  $target_paths = array(
    'admin/springboard/advocacy/targets',
    'admin/springboard/advocacy/targets/custom-targets/add',
    'admin/springboard/advocacy/targets/custom-targets/%/edit',
    'admin/springboard/advocacy/targets/custom-targets/%/delete',
    'admin/springboard/advocacy/targets/custom-groups/add',
    'admin/springboard/advocacy/targets/custom-groups/%/edit',
    'admin/springboard/advocacy/targets/custom-groups/%/delete',
  );

  foreach ($items as $path => $item) {
    if (in_array($path, $target_paths)) {
      $items[$path]['access callback'] = 'springboard_group_advocacy_custom_targets_and_groups_access';
      if (strpos($path, '/add') == FALSE) {
        array_push($items[$path]['access arguments'], 5);
      }
    }
  }
}

/**
 * Make the default advoacy target permissions group aware.
 *
 * @param $perm
 * @param null $item_id
 * @return bool
 */
function springboard_group_advocacy_custom_targets_and_groups_access($perm, $item_id = NULL) {
  if (user_access('administer group')) {
    return user_access($perm);
  }
  else {

    $groups = og_get_groups_by_user();

    // No group membership and not an admin, deny access.
    if (empty($groups['node'])) {
      return FALSE;
    }
    $context = springboard_group_get_group_context();

    // No group context and not an admin, deny access.
    if (empty($context)) {
      return FALSE;
    }

    switch ($perm) {
      case  'create groups':
      case  'create targets':
        // There's a group context, return the standard permission.
        return user_access($perm);

      case 'edit groups':
      case 'delete groups':

        // Test for target ownership by group.
        $api_call = springboard_advocacy_api_call();
        $response = $api_call->invokeClientMethod('getTargetGroup', $item_id);
        if (empty($response->data)) {
          return FALSE;
        }
        if ($response->data->affiliate_id != $context) {
          return FALSE;
        }
        if (!in_array($response->data->affiliate_id, $groups['node'])) {
          return FALSE;
        }

        return user_access($perm);

      case 'edit targets':
      case 'delete targets':

        $api_call = springboard_advocacy_api_call();
        $response = $api_call->invokeClientMethod('getCustomTarget', $item_id);
        if (empty($response->data)) {
          return FALSE;
        }
        if ($response->data->affiliate_id != $context) {
          return FALSE;
        }
        if (!in_array($response->data->affiliate_id, $groups['node'])) {
          return FALSE;
        }

        return user_access($perm);

    }
  }
}


function springboard_group_advocacy_springboard_target_user_can_access_targets_alter(&$access) {
  springboard_group_advocacy_custom_items_access($access);
}

function springboard_group_advocacy_springboard_target_user_can_access_groups_alter(&$access) {
  springboard_group_advocacy_custom_items_access($access);
}

function springboard_group_advocacy_custom_items_access(&$access) {
  if (user_access('administer group')) {
    $access = user_access('view targets')
      || user_access('create targets')
      || user_access('edit targets')
      || user_access('delete targets');
  }
  else {
    $groups = og_get_groups_by_user();
    // No group membership and not an admin, deny access.
    if (empty($groups['node'])) {
      $access = FALSE;
    }
    $context = springboard_group_get_group_context();
    // No group context and not an admin, deny access.
    if (empty($context)) {
      $access = FALSE;
    }
  }
}

/**
 * Check for group-based advocacy content type permissions.
 *
 * Show advocacy menu if true.
 */
function springboard_group_advocacy_user_can_create_advocacy_type() {
  $access = springboard_advocacy_user_can_create_advocacy_type();
  if ($access == FALSE) {
    $groups = og_get_entity_groups();
    if (!empty($groups['node'])) {
      foreach ($groups['node'] as $gid) {
        if ($roles = og_get_user_roles('node', $gid)) {
          $perms = og_role_permissions($roles);
          $role_permissions = [];
          foreach ($perms as $perm) {
            $role_permissions = array_merge($role_permissions, array_keys(array_filter($perm)));
          }
          $content_perms = array(
            'create sba_message_action content',
            'create sba_social_action content',
            'create sba_springboard petition content',
          );
          foreach ($content_perms as $content_perm) {
            if (in_array($content_perm, $role_permissions)) {
              $access = TRUE;
            }
          }
        }
      }
    }
  }
  return $access;
}