<?php

/**
 * @file
 * Integrate Springboard Groups with Springboard Advocacy.
 */

require_once __DIR__ . '/includes/springboard_group_advocacy.dashboard.inc';
require_once __DIR__ . '/includes/springboard_group_advocacy.node.inc';
require_once __DIR__ . '/includes/springboard_group_advocacy.node_form.inc';
require_once __DIR__ . '/includes/springboard_group_advocacy.og_context.inc';
require_once __DIR__ . '/includes/springboard_group_advocacy.subscription.inc';

/**
 * Implements hook_springboard_advocacy_views_plugin_query_alter().
 *
 * Alter the query plugin so it only returns results for allowed states
 * if the state selector is set to "All" while searching.
 */
function springboard_group_springboard_advocacy_views_plugin_query_alter(&$query) {

  $gid = springboard_group_advocacy_get_group_context();
  if (!empty($gid)) {
    $group_subscription = springboard_group_advocacy_get_saved_group_subscription($gid);
    // If this group is limited to particular states, add state values to the
    // search query, if none are present.
    if (in_array($group_subscription['group_subscription_type'], array(
      'states-selected',
      'federal-and-states-selected',
    ))) {
      if (!empty($query->search_terms) && empty($query->search_terms['states'])) {
        if ($query->search_terms['class_name'][0] != 'Target' && $query->search_terms['class_name'][0] != 'Group') {
          $states = unserialize($group_subscription['allowed_states']);
          $query->search_terms['state'] = $states;
        }
      }
    }
    // If there's a group id, only return results for that group when searching
    // custom targets or custom groups.
    if (!empty($query->search_terms) && ($query->search_terms['class_name'][0] == 'Target' || $query->search_terms['class_name'][0] == 'Group')) {
      $query->search_terms['affiliate_id'] = $gid;
    }
  }
  else {
    // @todo not implemented do we need this?
    // There's no group id.
    if (!empty($query->search_terms) && ($query->search_terms['class_name'][0] == 'Target' || $query->search_terms['class_name'][0] == 'Group')) {
      if (user_access('assign content to any springboard group')) {
        //$query->search_terms['affiliate_id'] = 'all';
      }
    }
  }

}

/**
 * Implements hook_form_alter().
 *
 * Add additional group-specific drupal settings for the sba_target_search.js
 * file to use while searching and adding targets.
 */
function springboard_group_advocacy_form_alter(&$form, &$form_state, $form_id) {

  $types = array(
    'sba_message_edit_form',
    'springboard_target_edit_custom_groups_form',
    'springboard_target_create_custom_groups_form',
  );

  if (in_array($form_id, $types)) {

    $api_call = springboard_advocacy_api_call();
    $subscription = $api_call->getSubscription();

    if (!empty($subscription['is_grouped'])) {
      $group_settings = array(
        'sbaSubscriptionIsGrouped' => TRUE,
        'sbaAllowedStates' => $subscription['states_custom'],
      );
    }
    else {
      $group_settings = array('sbaSubscriptionIsGrouped' => FALSE);
    }
    $form['#attached']['js'][] = array(
      'data' => $group_settings,
      'type' => 'setting',
    );
  }

}

/**
 * Implements hook_preprocess_page().
 *
 * Add the group selector to the advocacy dashboard pages.
 * @todo There's a better way.
 */
function springboard_group_advocacy_preprocess_page(&$vars) {
  $path = current_path();
  $omit = strpos($path, '/add') !== FALSE ? TRUE : strpos($path, '/edit') !== FALSE;
  $og_paths = springboard_group_advocacy_context_menu_paths();
  if (in_array($path, $og_paths) && !$omit && isset($_SESSION['springboard_group_context_multiple'])) {
    $build = array(
      'selector' => drupal_get_form('springboard_group_advocacy_group_selector_form', $_SESSION['springboard_group_context_multiple']),
    );
    $vars['page']['content']['system_main']['main']['#markup'] = render($build) . $vars['page']['content']['system_main']['main']['#markup'];
  }
}

