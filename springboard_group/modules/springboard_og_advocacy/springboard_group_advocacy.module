<?php

/**
 * @file
 * Integrate Springboard Groups with Springboard Advocacy.
 */

require_once __DIR__ . '/includes/springboard_group_advocacy.dashboard.inc';
require_once __DIR__ . '/includes/springboard_group_advocacy.node.inc';
require_once __DIR__ . '/includes/springboard_group_advocacy.node_form.inc';
require_once __DIR__ . '/includes/springboard_group_advocacy.subscription.inc';

/**
 * Implements hook_springboard_advocacy_views_plugin_query_alter().
 *
 * Alter the query plugin so it only returns results for allowed states
 * if the state selector is set to "All" while searching.
 */
function springboard_group_springboard_advocacy_views_plugin_query_alter(&$query) {
  $gid = springboard_group_get_group_context();
  if (!empty($gid)) {
    if ($gid != '_none' && $gid != '_all') {
      $group_subscription = springboard_group_advocacy_get_saved_group_subscription($gid);
      $type = $group_subscription['group_subscription_type'];
      switch ($type) {
        case 'states-selected':
        case'federal-and-states-selected':
          if (!empty($query->search_terms) && $query->search_terms['class_name'][0] == 'Legislator') {
            if (empty($query->search_terms['states'])) {
              $states = unserialize($group_subscription['allowed_states']);
              $query->search_terms['state'] = $states;
            }
            if ($type == 'states-selected') {
              if (empty($query->search_terms['role'])) {
                $query->search_terms['role'][] = 'SR|SS|GOVNR';
              }
            }
          }
          break;

        case 'state-only':
          if (!empty($query->search_terms) && $query->search_terms['class_name'][0] == 'Legislator') {
            if (empty($query->search_terms['role'])) {
              $query->search_terms['role'][] = 'SR|SS|GOVNR';
            }
          }
          break;

        case 'federal-only':
          if (!empty($query->search_terms) && $query->search_terms['class_name'][0] == 'Legislator') {
            if (empty($query->search_terms['role'])) {
              $query->search_terms['role'][] = 'FR|FS|PRES01|PRES02|PRES03';
            }
          }
          break;
      }
    }
    // If there's a group id, only return results for that group when searching
    // custom targets or custom groups.
    if (!empty($query->search_terms) && ($query->search_terms['class_name'][0] == 'Target' || $query->search_terms['class_name'][0] == 'Group')) {
      $query->search_terms['affiliate_id'] = $gid;
    }
  }
  else {
    // @todo not implemented do we need this?
    // There's no group id.
    if (!empty($query->search_terms) && ($query->search_terms['class_name'][0] == 'Target' || $query->search_terms['class_name'][0] == 'Group')) {
      if (user_access('administer group')) {
        $query->search_terms['affiliate_id'] = 'all';
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Add additional group-specific drupal settings for the sba_target_search.js
 * file to use while searching and adding targets.
 */
function springboard_group_advocacy_form_alter(&$form, &$form_state, $form_id) {

  $types = array(
    'sba_message_edit_form',
    'springboard_target_edit_custom_groups_form',
    'springboard_target_create_custom_groups_form',
  );

  if (in_array($form_id, $types)) {

    $api_call = springboard_advocacy_api_call();
    $subscription = $api_call->getSubscription();

    if (!empty($subscription['is_grouped'])) {
      $group_settings = array(
        'sbaSubscriptionIsGrouped' => TRUE,
        'sbaAllowedStates' => $subscription['states_custom'],
      );
    }
    else {
      $group_settings = array('sbaSubscriptionIsGrouped' => FALSE);
    }
    $form['#attached']['js'][] = array(
      'data' => $group_settings,
      'type' => 'setting',
    );
  }

}

/**
 * Implements hook_preprocess_page().
 *
 * Remove the group selector from the edit pages.
 */
function springboard_group_advocacy_preprocess_page(&$vars) {
  $path = current_path();
  $omit = strpos($path, '/add') !== FALSE ? TRUE : strpos($path, '/edit') !== FALSE;
  $og_paths = springboard_group_advocacy_springboard_group_context_menu_paths();
  if ((!in_array($path, $og_paths) || $omit) && isset($_SESSION['springboard_group_context_multiple'])) {
    unset($vars['page']['content']['system_main']['selector']);
  }
}

/**
 * Implements hook_springboard_group_context_menu_path().
 *
 * Define the context paths for hook_og_context_negotiation_info().
 *
 * Also called from springboard_group_advocacy_preprocess_page().
 */
function springboard_group_advocacy_springboard_group_context_menu_paths() {

  $paths = &drupal_static(__FUNCTION__);
  if (!isset($paths)) {
    $groups_enabled_types = springboard_group_get_grouped_types();
    $paths = array();
    if (isset($groups_enabled_types['node']['sba_message_action']) || isset($groups_enabled_types['node']['sba_social_action'])) {
      array_push($paths, 'admin/springboard/advocacy/targets');
      array_push($paths, 'admin/springboard/advocacy/actions');
      array_push($paths, 'admin/springboard/advocacy/targets/custom-targets');
      array_push($paths, 'admin/springboard/advocacy/targets/custom-groups');

    }
    if (isset($groups_enabled_types['node']['sba_message_action'])) {
      array_push($paths, 'admin/springboard/advocacy/message-actions/all');
    }
    if (isset($groups_enabled_types['node']['sba_social_action'])) {
      array_push($paths, 'admin/springboard/advocacy/social-actions/all');
    }
  }

  return $paths;
}

/**
 * Implements hook_og_permission().
 */
function springboard_group_advocacy_og_permission() {
  return array(
    'administer advocacy group subscription' => array(
      'title' => t('Administer advocacy subscription'),
      'description' => t("Change the advocacy subscription level of a group."),
      'roles' => array(OG_AUTHENTICATED_ROLE),
      'default role' => array(),
    ),
  );
}

/**
 * Implements hook_views_data_alter().
 *
 * Add data array for Affiliate ID field returned by API query.
 * Call it Affiliate Name because we convert to the group name in
 * springboard_group_preprocess_views_view_table().
 */
function springboard_group_advocacy_views_data_alter(&$data) {
  // Target ID returned by the API request.
  $data['advocacy']['affiliate_id'] = array(
    'title' => t('Affiliate name'),
    'help' => t('Affiliate Name'),
    'field' => array(
      'click sortable' => TRUE,
      'handler' => 'springboard_advocacy_views_handler_field',
    ),
  );
}

/**
 * Implements hook_views_preprocess_views_view_table().
 *
 * Change the Affiliate ID field to display the affiliate name, and make the
 * affilaite name sortable.
 */
function springboard_group_preprocess_views_view_table(&$vars) {
  $view = $vars['view'];
  if ($view->name == 'sba_custom_targets') {
    foreach ($vars['rows'] as $key => $row) {
      foreach ($row as $field_name => $value) {
        if ($field_name == 'affiliate_id') {
          if (is_numeric($value)) {
            $group = node_load($value);
            if (!empty($group->nid) && !empty($group->type) && $group->type == 'springboard_group') {
              $vars['rows'][$key][$field_name] = check_plain($group->title);
            }
            elseif (empty($group->nid) && empty($group->type)) {
              $vars['rows'][$key][$field_name] = "Group deleted";
            }
          }
        }
      }
    }
  }
  if (isset($_GET['order']) && $_GET['order'] == 'affiliate_id') {
    usort($vars['rows'], function ($a, $b) {
      if ($_GET['sort'] == 'desc') {
        return strcmp($b['affiliate_id'], $a['affiliate_id']);
      }
      else {
        return strcmp($a['affiliate_id'], $b['affiliate_id']);
      }
    });
  }
}

/**
 * Implements hook_views_default_views_alter().
 *
 * Add the Affilaite Group Field to Advocacy dashboard views.
 */
function springboard_group_advocacy_views_default_views_alter(&$views) {
  $displays = $views['sba_custom_targets']->display;
  foreach ($displays as $display_name => $display) {
    $handler =& $views['sba_custom_targets']->display[$display_name]->handler;
    if (!empty($handler->display->display_options['fields'])) {
      $fields =& $handler->display->display_options['fields'];
      $group_field = [];
      $group_field['affiliate_name']['id'] = 'affiliate_id';
      $group_field['affiliate_name']['table'] = 'advocacy';
      $group_field['affiliate_name']['field'] = 'affiliate_id';
      $group_field['affiliate_name']['label'] = 'Affiliate Group';
      if ($display_name == 'block_1') {
        array_splice($fields, 3, 0, $group_field);
      }
      else {
        array_splice($fields, 2, 0, $group_field);
      }
    }
  }
}
