<?php
/**
 * @file
 * Module file for fundraiser_commerce_cardonfile.
 */

require_once 'includes/fundraiser_commerce_cardonfile.fundraiser.inc';

/**
 * Implements hook_menu().
 */
function fundraiser_commerce_cardonfile_menu() {
  $items = array();

  $items['admin/springboard/options/fundraiser/fundraiser_commerce_cardonfile'] = array(
    'title' => 'Fundraiser Cardonfile Settings',
    'description' => 'Settings for fundraiser cardonfile.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_commerce_cardonfile_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer fundraiser configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/fundraiser_commerce_cardonfile.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_springboard_admin_admin_menu_items_alter().
 */
function fundraiser_commerce_cardonfile_springboard_admin_admin_menu_items_alter(&$items) {
  // Settings > Settings > Sustainer Upsell.
  $items['admin/springboard/settings']['_children']['admin/springboard/settings/config']['_children']['admin/springboard/options/fundraiser/fundraiser_commerce_cardonfile'] = array(
    'link_path' => 'admin/springboard/options/fundraiser/fundraiser_commerce_cardonfile',
    'link_title' => 'Fundraiser Cardonfile Settings',
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 0,
    'customized' => 1,
    'weight' => 0,
  );
}

/**
 * Implements hook_views_api().
 */
function fundraiser_commerce_cardonfile_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'fundraiser_commerce_cardonfile') . '/includes/views',
  );
}

/**
 * Implements hook_views_pre_render().
 *
 * Remove cards that have no used by entries; remove card name and billing
 * profile label if the card name is the same as the billing profile name.
 */
function fundraiser_commerce_cardonfile_views_pre_render(&$view) {
  if ($view->name != 'commerce_card_on_file_user_cards') {
    return;
  }

  foreach ($view->result as $key => $result) {
    // If this card isn't being used by quick donate or for a recurring donation
    // unset it.
    if (empty($result->used_by)) {
      unset($view->result[$key]);
      continue;
    }

    // Array of payment gateways used by cards that should not be displayed.
    $blacklist = array(
      'braintree_hostedfields|commerce_payment_braintree_hostedfields',
      'commerce_psi_credit|commerce_payment_commerce_psi_credit',
    );

    // If the payment gateway is in the blacklist, unset this card.
    $card = commerce_cardonfile_load($result->card_id);
    if (in_array($card->instance_id, $blacklist)) {
      return;
    }

    // If this card isn't of type "credit", unset it.
    $gateway = _fundraiser_gateway_info($card->instance_id);
    if ($gateway['payment_method'][0] != 'credit') {
      unset($view->result[$key]);
      continue;
    }

    // Unset the card name and billing profile label if the card name and name
    // on the billing profile is the same.
    if (!empty($result->field_commerce_cardonfile_profile) && strpos($result->field_commerce_cardonfile_profile[0]['rendered']['#markup'], $result->commerce_cardonfile_card_name) !== FALSE) {
      unset($view->field['card_name']);
      $view->field['commerce_cardonfile_profile']->options['label'] = '';
    }
  }
}
