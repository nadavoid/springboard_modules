<?php

/**
 * Implements hook_node_form_alter().
 *
 * Add the advocacy settings to the goup node's vertical tab.
 */
function springboard_og_advocacy_form_node_form_alter(&$form, &$form_state) {

  if ($form['#node']->type == 'springboard_group') {
    // First check if advocacy is configured.
    $unconfigured = springboard_advocacy_api_unconfigured('springboard');
    if ($unconfigured) {
      $items = implode(', ', $unconfigured);
      $message = t('Please <a href="!url">configure</a> the Springboard Advocacy API settings. There are empty values in :items. This feature will not function without required configuration.', array(
        '!url' => url('admin/config/services/advocacy'),
        ':items' => $items,
      ));
      $form['advocacy_settings']['not_configured']['#markup'] = $message;
    }
    // Get the subscription info.
    $api_call = springboard_advocacy_api_call();
    $subscription = $api_call->getSubscription();
    if ($subscription) {
      // Add the form.
      springboard_og_advocacy_build_subscription_form($form, $subscription);
    }
  }

}


/**
 * Builds the subscription form based on allowed subscription levels.
 *
 * Settings are stored in db table sb_og_advocacy:
 *   gid
 *   group_subscription_type
 *   master_subscription_type
 *   allowed_states.
 *
 * @param array $form
 *   The node edit form.
 * @param array $subscription
 *   The advocacy subscription details.
 */
function springboard_og_advocacy_build_subscription_form(&$form, $subscription) {

  $form['#attached']['css'][] = drupal_get_path('module', 'springboard_og_advocacy') . '/css/sb-og-advocacy.css';

  // Complete set of subscription options prior to subscription  check.
  $options = array(
    'federal-and-states' => 'Federal + All States',
    'federal-only' => 'Federal Only',
    'state-only' => 'All States',
    'federal-and-states-selected' => 'One or More States (Plus Federal)',
    'states-selected' => 'One or More States (No Federal)',
  );

  // All states. Can be subject to filtering later.
  $state_options = springboard_og_advocacy_get_all_states();

  // If the main API account is not Federal plus All States, we need to
  // limit the options presented on the group node according to the main API
  // account options.
  switch ($subscription['subscription_type']) {
    case 'federal-only':
      unset($options['federal-and-states']);
      unset($options['state-only']);
      unset($options['federal-and-states-selected']);
      unset($options['states-selected']);
      break;

    case 'state-only':
      unset($options['federal-and-states']);
      unset($options['federal-only']);
      unset($options['federal-and-states-selected']);
      break;

    case 'federal-and-states-selected':
      unset($options['federal-and-states']);
      unset($options['state-only']);
      // Get the allowed states for this subscription level.
      $state_options = springboard_og_advocacy_get_allowed_states($subscription);
      break;

    case 'states-selected':
      unset($options['federal-and-states']);
      unset($options['state-only']);
      unset($options['federal-only']);
      unset($options['federal-and-states-selected']);
      // Get the allowed states for this subscription level.
      $state_options = springboard_og_advocacy_get_allowed_states($subscription);
      break;
  }

  // Variable to store check of whether subscription level previously stored
  // in Drupal no longer matches the current master API server subscription
  // level. This would only happen if the subscription setting was changed on
  // the API server, which should be a *very* rare occurrence.
  $subscription_conflict = FALSE;

  if (!empty($form['#node']->nid)) {
    // Retrieve stored subscription settings for this node.
    $settings = springboard_og_advocacy_get_group_subscription($form['#node']->nid);
    if (!empty($settings['master_subscription_type']) && $settings['master_subscription_type'] != $subscription['subscription_type']) {
      // If the subscription level is stored in this node is incompatible
      // with the master subscription, set a warning.
      if (!in_array($settings['group_subscription_type'], array_keys($options))) {
        $subscription_conflict = TRUE;
        drupal_set_message(t("This group's advocacy subscription setting is out of date. The master subscription on the API server is @level. The master subscription when this group was last updated was @oldlevel. Please update the group subscription level.", array(
          '@level' => check_plain($subscription['subscription_type']),
          '@oldlevel' => check_plain($settings['master_subscription_type']),
        )));
      }
    }
  }

  $default_subscription_type = [];
  // Get the previously stored subscription level if any.
  if (!empty($settings['group_subscription_type'])  && $subscription_conflict == FALSE) {
    $default_subscription_type = $settings['group_subscription_type'];
  }
  elseif (count($options) == 1 && $subscription_conflict == FALSE) {
    // If there's no previously stored subscription level, and there is only
    // one subscription level available, make it the default.
    $default_subscription_type = array_keys($options)[0];
  }

  // Container form element.
  $form['advocacy_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advocacy settings'),
    '#collapsible' => FALSE,
    '#group' => 'additional_settings',
  );

  // Grab the master subscription type.
  $form['advocacy_settings']['master_subscription_type'] = array(
    '#type' => 'value',
    '#value' => $subscription['subscription_type'],
  );

  // REtrieve/set the group subscription type.
  $form['advocacy_settings']['group_subscription_type'] = array(
    '#type' => 'radios',
    '#title' => t('Subscription Level'),
    '#options' => $options,
    '#default_value' => $default_subscription_type,
  );

  // Retrieve set the allowed states, if the subscription is state-limited.
  $default_saved_states = array();
  if (!empty($settings['allowed_states']) && $subscription_conflict == FALSE) {
    $default_saved_states = unserialize($settings['allowed_states']);
  }
  $form['advocacy_settings']['us_states'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Available states'),
    '#options' => $state_options,
    '#default_value' => $default_saved_states,
    '#states' => array(
      'visible' => array(
        array(
          array(':input[name*="group_subscription_type"]' => array('value' => 'federal-and-states-selected')),
          array(':input[name*="group_subscription_type"]' => array('value' => 'states-selected')),
        ),
      ),
    ),
  );

  $form['#validate'][] = 'springboard_og_advocacy_form_validate';
}

/**
 * Form validation handler.
 */
function springboard_og_advocacy_form_validate($form, $form_state) {
  $api_call = springboard_advocacy_api_call();
  $subscription = $api_call->getSubscription();
  if ($subscription) {
    if (empty($form_state['values']['group_subscription_type'])) {
      form_set_error('group_subscription_type', t('Advocacy Group Subscription Level cannot be empty.'));
    }
  }
}

/**
 * Filters US state list for allowed states.
 *
 * @param array $subscription
 *    The subscription level data.
 *
 * @return array
 *   An array of US states allowed for this subscription.
 */
function springboard_og_advocacy_get_allowed_states($subscription) {
  $arr = array_reverse($subscription['states_custom'], TRUE);
  $subscription['states_custom'] = array_reverse($arr, TRUE);
  $states = springboard_og_advocacy_get_all_states();
  $state_options = array_flip(
    array_intersect(
      array_flip($states),
      $subscription['states_custom']
    )
  );
  return $state_options;
}

/**
 * US state list.
 *
 * @return array
 *   All US states.
 */
function springboard_og_advocacy_get_all_states() {
  return array(
    'AL' => 'Alabama',
    'AK' => 'Alaska',
    'AZ' => 'Arizona',
    'AR' => 'Arkansas',
    'CA' => 'California',
    'CO' => 'Colorado',
    'CT' => 'Connecticut',
    'DE' => 'Delaware',
    'DC' => 'District of Columbia',
    'FL' => 'Florida',
    'GA' => 'Georgia',
    'HI' => 'Hawaii',
    'ID' => 'Idaho',
    'IL' => 'Illinois',
    'IN' => 'Indiana',
    'IA' => 'Iowa',
    'KS' => 'Kansas',
    'KY' => 'Kentucky',
    'LA' => 'Louisiana',
    'ME' => 'Maine',
    'MD' => 'Maryland',
    'MA' => 'Massachusetts',
    'MI' => 'Michigan',
    'MN' => 'Minnesota',
    'MS' => 'Mississippi',
    'MO' => 'Missouri',
    'MT' => 'Montana',
    'NE' => 'Nebraska',
    'NV' => 'Nevada',
    'NH' => 'New Hampshire',
    'NJ' => 'New Jersey',
    'NM' => 'New Mexico',
    'NY' => 'New York',
    'NC' => 'North Carolina',
    'ND' => 'North Dakota',
    'OH' => 'Ohio',
    'OK' => 'Oklahoma',
    'OR' => 'Oregon',
    'PA' => 'Pennsylvania',
    'RI' => 'Rhode Island',
    'SC' => 'South Carolina',
    'SD' => 'South Dakota',
    'TN' => 'Tennessee',
    'TX' => 'Texas',
    'UT' => 'Utah',
    'VT' => 'Vermont',
    'VA' => 'Virginia',
    'WA' => 'Washington',
    'WV' => 'West Virginia',
    'WI' => 'Wisconsin',
    'WY' => 'Wyoming',
  );
}

/**
 * Implements hook_node_insert().
 */
function springboard_og_advocacy_node_insert($node) {
  if ($node->type == 'springboard_group') {
    springboard_og_advocacy_save($node);
  }
}

/**
 * Implements hook_node_update().
 */
function springboard_og_advocacy_node_update($node) {
  if ($node->type == 'springboard_group') {
    springboard_og_advocacy_save($node);
  }
}

/**
 * Save the group's advocacy subscription data.
 *
 * @param object $node
 *   The Springboard Group node.
 */
function springboard_og_advocacy_save($node) {

  // Is there an existing subscription record?
  // @todo Safe to use is_new instead?
  $exists = db_query('select gid from {sb_og_advocacy} where gid = :gid', (array(':gid' => $node->nid)))->fetchField();

  // If the subscription level permits state subscriptions, save them;
  // otherwise, remove any previously existing state data.
  $allowed_states = $node->group_subscription_type != 'federal-and-states' && $node->group_subscription_type != 'states-only' ? array_filter($node->us_states) : [];

  $data = array(
    'gid' => $node->nid,
    "allowed_states" => $allowed_states,
    'master_subscription_type' => $node->master_subscription_type,
    'group_subscription_type' => $node->group_subscription_type,
  );

  if (!empty($exists)) {
    drupal_write_record('sb_og_advocacy', $data, array('gid'));
  }
  else {
    drupal_write_record('sb_og_advocacy', $data);
  }
}

/**
 * Implements hook_springboard_advocacy_subscription_alter().
 *
 * Change subscription level based on springboard group context.
 */
function springboard_og_springboard_advocacy_subscription_alter(&$subscription) {
  // Check for a group context.
  $group_context = og_context('node');
  if (!empty($group_context['gid'])) {
    // Get the current node to check that it is not itself a group.
    $node = menu_get_object();

    if (!empty($node->nid) && !og_is_group('node', $node->nid)) {
      // We're on a message add or edit page.
      $group_subscription = springboard_og_advocacy_get_group_subscription($group_context['gid']);
      $states = unserialize($group_subscription['allowed_states']);
      $subscription['states_custom'] = !empty($states) ? array_keys($states) : [];
      $subscription['subscription_type'] = $group_subscription['group_subscription_type'];
      $subscription['is_grouped'] = TRUE;
    }
    elseif (empty($node)) {
      // We're on the custom groups add or edit pages.
      $group_subscription = springboard_og_advocacy_get_group_subscription($group_context['gid']);
      $states = unserialize($group_subscription['allowed_states']);
      $subscription['states_custom'] = !empty($states) ? array_keys($states) : [];
      $subscription['subscription_type'] = $group_subscription['group_subscription_type'];
      $subscription['is_grouped'] = TRUE;
    }
  }
  else {
    $subscription['is_grouped'] = FALSE;
  }
}

/**
 * Implements hook_springboard_advocacy_views_plugin_query_alter().
 *
 * Alter the query plugin so it only returns results for allowed states
 * if the state selector is set to "All" while searching.
 */
function springboard_og_springboard_advocacy_views_plugin_query_alter(&$query) {

  // Check for a node context.
  $node = menu_get_object();
  if (!empty($node->nid) && !og_is_group('node', $node->nid)) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $group = $wrapper->og_group_ref->value();
    $gid = $group[0]->nid;
  }
  else {
    //check for session value
    //    $context = og_context('node');
    //    $gid = $context['gid']; does not work because path is system/ajax
    // when searching on custom groups page...
    $gid = $_SESSION['springboard_og_advocacy_working_group'];
  }
  if (!empty($gid)) {
    $group_subscription = springboard_og_advocacy_get_group_subscription($gid);
    if (in_array($group_subscription['group_subscription_type'], array(
      'states-selected',
      'federal-and-states-selected',
    ))) {
      if (!empty($query->search_terms) && empty($query->search_terms['states'])) {
        $states = unserialize($group_subscription['allowed_states']);
        $query->search_terms['state'] = $states;
      }
    }
  }

}

/**
 * Get a particular group's subscription data.
 *
 * @param int $gid
 *   The group id.
 *
 * @return array
 *   The group's subscripton data.
 */
function springboard_og_advocacy_get_group_subscription($gid) {
  $subscription = db_query('select * from {sb_og_advocacy} where gid = :gid', (array(':gid' => $gid)))->fetchAssoc();
  return $subscription;
}

/**
 * Implements hook_form_alter().
 *
 * Add additional group-specific drupal settings for the sba_target_search.js
 * file to use while searching and adding targets.
 */
function springboard_og_advocacy_form_alter(&$form, &$form_state, $form_id) {
  $types = array('sba_message_edit_form', 'springboard_target_edit_custom_groups_form', 'springboard_target_create_custom_groups_form');
  if (in_array($form_id, $types)) {
    $api_call = springboard_advocacy_api_call();
    $subscription = $api_call->getSubscription();

    if (!empty($subscription['is_grouped'])) {
      $group_settings = array(
        'sbaSubscriptionIsGrouped' => TRUE,
        'sbaAllowedStates' => $subscription['states_custom'],
      );
    }
    else {
      $group_settings = array('sbaSubscriptionIsGrouped' => FALSE);
    }
    $form['#attached']['js'][] = array(
      'data' => $group_settings,
      'type' => 'setting',
    );
  }

}

/**
 * Implements hook_og_context_negotiation_info().
 *
 * Fires off a context negotiator on non-node advocacy paths, so we can figure
 * out what group we're currently working in.
 */
function springboard_og_advocacy_og_context_negotiation_info() {
  $providers = array();
  $providers['springboard_og_advocacy'] = array(
    'name' => t('Springboard OG Advocacy'),
    'description' => t("Determine context for API subscriptions"),
    'callback' => 'springboard_og_advocacy_og_context_handler',
    'menu path' => array(
      'admin/springboard/advocacy/targets',
    ),
  );

  return $providers;
}

/**
 * OG_context handler.
 *
 * On non-node pages, figure out the current group context, or set it.
 */
function springboard_og_advocacy_og_context_handler($item = NULL) {
  $path = current_path();
  unset($_SESSION['og_context']);
  if (strpos($path, '/edit') !== FALSE) {
    // @todo get the group from the target ID.
    //return array('node' => array($gid);
  }
  global $user;
  $ret = array();
  if ($user->uid) {
    $groups = og_get_groups_by_user();
    if (!empty($groups['node'])) {

      // If the user only belongs to one group, return it.
      if (count($groups['node']) === 1) {
        $gid = reset($groups['node']);
        $ret = array('node' => array($gid));
      }
      // If the user has multiple groups and there is not a currently selected
      // working group, set the first group as the working group, and set
      // springboard_og_context_multiple so that the dashboard knows we need a
      // selector.
      elseif (!isset($_SESSION['springboard_og_advocacy_working_group'])) {

        $_SESSION['springboard_og_context_multiple'] = array_values($groups['node']);
        $gid = reset($groups['node']);
        $_SESSION['springboard_og_advocacy_working_group'] = $gid;
        $ret = array('node' => array($gid));
      }
      else {
        // There's already a working group, return it as the context and
        // tell the dashboard we need a selector.
        $_SESSION['springboard_og_context_multiple'] = array_values($groups['node']);
        $ret = array('node' => array($_SESSION['springboard_og_advocacy_working_group']));
      }
    }
  }

  return $ret;
}

/**
 * Implements hook_boot().
 *
 * Clear the context value. Not sure we need this.
 */
function springboard_og_advocacy_boot() {
  if (isset($_SESSION['springboard_og_context_multiple'])) {
    unset($_SESSION['springboard_og_context_multiple']);
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Add the group selector to the advocacy dashboard pages.
 * @todo There's a better way.
 */
function springboard_og_preprocess_page(&$vars) {
  $path = current_path();
  $omit = strpos($path, '/add') !== FALSE ? TRUE : strpos($path, '/edit') !== FALSE;
  if (!$omit && isset($_SESSION['springboard_og_context_multiple'])) {
    $build = array(
      'selector' => drupal_get_form('springboard_og_advocacy_group_selector_form', $_SESSION['springboard_og_context_multiple']),
    );
    $vars['page']['content']['system_main']['main']['#markup'] = render($build) . $vars['page']['content']['system_main']['main']['#markup'];
  }
}

/**
 * Build the group selector form for advocacy dashboard page.
 *
 * @param $form
 * @param $form_state
 * @param $groups
 *
 * @return array
 */
function springboard_og_advocacy_group_selector_form($form, &$form_state, $groups) {

  $form = [];
  $form['title']['#markup'] = '<strong>' . t('Choose an affiliate group to work in:') . '</strong>';

  // Build the selector form from groups found in user session.
  $options = [];
  foreach ($groups as $nid) {
    $node = node_load($nid);
    $options[$nid] = check_plain($node->title);
  }

  $form['groups'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $_SESSION['og_context'],
    '#ajax' => array(
      'callback' => 'springboard_og_advocacy_group_selector',
      'wrapper' => 'sba-dashboard',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#prefix' => '<div id="group-selector-div">',
    '#suffix' => '</div>',
  );

  // Get the page argument that the dashboard callback expects.
  if (isset($form_state['values']['path'])) {
    $path = $form_state['values']['path'];
  }
  else {
    $item = menu_get_item();
    $path = $item['page_arguments'][0];
  }
  $form['path'] = array(
    '#type' => 'value',
    '#value' => $path,
  );

  return $form;
}


/**
 * AJAX callback for group selector form.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function springboard_og_advocacy_group_selector($form, &$form_state) {
  // Put the chosen group into session, so it can be retrieved by
  // springboard_og_advocacy_og_context_handler().
  $_SESSION['springboard_og_advocacy_working_group'] = $form_state['values']['groups'];

  // Reload the dashboard so the views result can filter by the selected group.
  $dashboard = springboard_advocacy_dashboard($form_state['values']['path']);
  return $dashboard;
}

// Alternate menu paths to the advocacy dashboard from group nodes with
// group unique
// permissions might be better/simpler than using
// session negotiation when user has
// multiple groups.