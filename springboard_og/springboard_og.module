<?php

require_once __DIR__ . '/includes/springboard_og.field_groups.inc';
require_once __DIR__ . '/includes/springboard_og.fields.inc';
require_once __DIR__ . '/includes/springboard_og.menu.inc';
require_once __DIR__ . '/includes/springboard_og.rules.inc';

/**
 * Implements hook_node_info().
 */
function springboard_og_node_info() {
  $items = array(
    'springboard_group' => array(
      'name' => t('Springboard Group'),
      'base' => 'node_content',
      'description' => '',
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
      'locked' => TRUE,
    ),
  );
  return $items;
}

/**
 * Implements hook_views_api().
 */
function springboard_og_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'springboard_og') . '/includes/views',
  );
}

/**
 * @param null $module
 * @param null $api
 * @return array
 */
function springboard_og_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "field_group" && $api == "field_group") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_permission().
 */
function springboard_og_permission() {
  return array(
    'administer springboard groups' => array(
      'title' => t('Administer Springboard Groups'),
      'description' => t('Perform administration tasks for Springboard Groups.'),
    ),

    'access all springboard groups' => array(
      'title' => t('Access all springboard groups'),
      'description' => t('Access all groups'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Change the default text on og_group_ref field deletion confirm page. That is
 * when making an entity un-groupable.
 */
function springboard_og_form_og_ui_field_delete_form_alter(&$form, &$form_state) {
  if ($_GET['destination'] = 'admin/springboard/groups/settings') {
    $form['actions']['cancel']['#markup'] = l(t('cancel'), 'admin/springboard/groups/settings');
    $form['description']['#markup'] = t('All group associations for the @type content type will be deleted. This cannot be undone.', array('@type' => arg(5)));
  }
}

/**
 * Get a list of groupable entity types.
 *
 * Checks to see what entity types have an OG group reference field.
 *
 * @return array
 *   An array of groupable entites.
 */
function springboard_og_get_grouped_types() {
  $groups_enabled = &drupal_static(__FUNCTION__);
  if (!isset($groups_enabled)) {
    // Get the fields that exist in the bundle.
    foreach (field_info_fields() as $field_name => $field) {
      if ($field['type'] == 'entityreference' && $field['settings']['handler'] == 'og' && !empty($field['bundles'])) {
        foreach ($field['bundles'] as $entity_type => $bundles) {
          foreach ($bundles as $bundle) {
            $groups_enabled[$entity_type][$bundle][] = $field_name;
          }
        }
      }
    }
  }
  return $groups_enabled;
}

/**
 * Implements hook_form_node_form_alter().
 */
function springboard_og_form_node_form_alter(&$form, &$form_state) {
  if ($form['#node']->type == 'springboard_group') {
    // Change some of the defaults on the addressfield.
    if (!empty($form['field_sb_group_address'])) {
      $form['field_sb_group_address']['#type'] = 'fieldset';
      $form['field_sb_group_address']['#collapsible'] = TRUE;
      $form['field_sb_group_address']['#collapsed'] = TRUE;
      $form['field_sb_group_address']['#title'] = t('Address');
      $form['field_sb_group_address'][$form['field_sb_group_address']['#language']][0]['#title'] = '';
    }
  }
}
