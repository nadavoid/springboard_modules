<?php

/**
 * Implements hook_menu().
 */
function springboard_og_menu() {
  $items = array();

  $items['admin/springboard/groups/settings'] = array(
    'title' => 'Springboard Groups Settings',
    'description' => 'Configuration settings for Springboard Group features',
    'page callback' => 'springboard_og_settings_page',
    'access arguments' => array('administer springboard groups'),
    'file' => 'includes/springboard_og.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // OG module doesn't define a default tab. We help it here.
  $items['group/%/%/admin/people/all'] = array(
    'title' => 'People',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['group/%/%/admin/people/bulk-add'] = array(
    'page callback' => 'springboard_og_bulk_add',
    'page arguments' => array(1, 2),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
    'title' => 'Bulk Add Members',
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('add user', 1, 2),
  );

  return $items;
}

/**
 * Implements hook_springboard_admin_admin_menu_items_alter().
 *
 * Add the springboard group links to springboard admin.
 */
function springboard_og_springboard_admin_admin_menu_items_alter(&$items) {

  $items['admin/springboard/groups'] = array(
    'link_path' => 'admin/springboard/groups',
    'link_title' => t('Groups'),
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 1,
    'customized' => 1,
    'weight' => 3,
    '_children' => array(),
  );

  $items['admin/springboard/groups']['_children']['admin/springboard/groups'] = array(
    'link_path' => 'admin/springboard/groups',
    'link_title' => 'View All Groups',
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 1,
    'customized' => 1,
    'weight' => -5,
  );

  $items['admin/springboard/groups']['_children']['admin/springboard/groups/my'] = array(
    'link_path' => 'admin/springboard/groups/my',
    'link_title' => 'My Groups',
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 1,
    'customized' => 1,
    'weight' => -4,
  );

  $items['admin/springboard/groups']['_children']['admin/springboard/groups/settings'] = array(
    'link_path' => 'admin/springboard/groups/settings',
    'link_title' => 'Groups Settings',
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 1,
    'customized' => 1,
    'weight' => 0,
  );
}

/**
 * Implements hook_views_api().
 */
function springboard_og_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'springboard_og') . '/includes/views',
  );
}

/**
 * Implements hook_permission().
 */
function springboard_og_permission() {
  return array(
    'administer springboard groups' => array(
      'title' => t('Administer Springboard Groups'),
      'description' => t('Perform administration tasks for Springboard Groups.'),
    ),
  );
}


/**
 * Implements hook_form_FORMID_alter().
 *
 * Change the default text on og_group_ref field deletion confirm page. That is
 * when making an entity un-groupable.
 */
function springboard_og_form_og_ui_field_delete_form_alter(&$form, &$form_state) {
  if ($_GET['destination'] = 'admin/config/springboard-groups') {
    $form['actions']['cancel']['#markup'] = l(t('cancel'), 'admin/config/springboard-groups');
    $form['description']['#markup'] = t('All group associations for this content type will be deleted. This cannot be undone.');
  }
}

/**
 * Implements hook_springboard_admin_alias_patterns().
 *
 * Put groups paths under springboard backend theme.
 */
function springboard_og_springboard_admin_alias_patterns() {
  return array(
    'group/node/%/admin/people' => array(
      'path' => array(
        'regex' => '|^/group/node/([0-9]+)/admin/people|',
        'replacement' => 'group/node/$1/admin/people',
      ),
      'alias' => array(
        'regex' => '|^springboard/group/node/([0-9]+)/admin/people|',
        'replacement' => 'springboard/group/node/$1/admin/people',
      ),
    ),
    'group/node/%/admin/people/add-user' => array(
      'path' => array(
        'regex' => '|^/group/node/([0-9]+)/admin/people/add-user|',
        'replacement' => 'group/node/$1/admin/people/add-user',
      ),
      'alias' => array(
        'regex' => '|^springboard/group/node/([0-9]+)/admin/people/add-user|',
        'replacement' => 'springboard/group/node/$1/admin/people/add-user',
      ),
    ),
    'group/node/%/admin/people/bulk-add' => array(
      'path' => array(
        'regex' => '|^/group/node/([0-9]+)/admin/people/bulk-add|',
        'replacement' => 'group/node/$1/admin/people/bulk-add',
      ),
      'alias' => array(
        'regex' => '|^springboard/group/node/([0-9]+)/admin/people/bulk-add|',
        'replacement' => 'springboard/group/node/$1/admin/people/bulk-add',
      ),
    ),
    'group/node/%/admin/roles' => array(
      'path' => array(
        'regex' => '|^/group/node/([0-9]+)/admin/roles|',
        'replacement' => 'group/node/$1/admin/roles',
      ),
      'alias' => array(
        'regex' => '|^springboard/group/node/([0-9]+)/admin/roles|',
        'replacement' => 'springboard/group/node/$1/admin/roles',
      ),
    ),
    'group/node/%/admin/people/permissions' => array(
      'path' => array(
        'regex' => '|^/group/node/([0-9]+)/admin/permissions|',
        'replacement' => 'group/node/$1/admin/permissions',
      ),
      'alias' => array(
        'regex' => '|^springboard/group/node/([0-9]+)/admin/permissions|',
        'replacement' => 'springboard/group/node/$1/admin/permissions',
      ),
    ),
  );
}

/**
 * Implements hook_rules_configuration().
 *
 * A rule which enables builk adding of users to a group.
 */
function springboard_og_default_rules_configuration() {
  $items['rules_springboard_og_bulk_add'] = entity_import('rules_config', '{ "rules_springboard_og_bulk_add" : {
    "LABEL" : "add_og_membership",
    "PLUGIN" : "action set",
    "REQUIRES" : [ "og", "rules" ],
    "ACCESS_EXPOSED" : "1",
    "USES VARIABLES" : { "user" : { "label" : "user", "type" : "user" } },
    "ACTION SET" : [
      { "og_group_content_add" : { "entity" : [ "user" ], "group" : [ "site:og-context--node" ] } },
      { "drupal_message" : { "message" : "User [user:name] added to group" } }
    ]
  }
}');

  return $items;
}

/**
 * Bulk add users to a group.
 *
 * @param string $group_type
 * @param int $group_id
 *
 * @return mixed
 *   An empty string if permissions are lacking, the bulk add view
 *   if permissions exist.
 */
function springboard_og_bulk_add($group_type, $group_id) {

  // check if user has access to view user profiles which is needed
  if (!user_access('View user profiles')) {
    drupal_set_message(t('You need to have access to view user profiles in
      order to add users to groups. Please configure the needed permission'),
      'error');
    return '';
  }
  else {
    if (is_numeric($group_id)) {
      og_set_breadcrumb($group_type, $group_id, array(l(t('Group'), "$group_type/$group_id/group")));
      $view = views_get_view('springboard_og_bulk_add');
      $view->set_arguments(array($group_id));
      $view->set_display('block_1');
      $view->pre_execute();
      $view->execute();
      $content = $view->render();
      return $content;
    }
  }
}

/**
 * Implements hook_node_info().
 */
function springboard_og_node_info() {
  $items = array(
    'springboard_group' => array(
      'name' => t('Springboard Group'),
      'base' => 'node_content',
      'description' => '',
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
      'locked' => TRUE,
    ),
  );
  return $items;
}

/**
 * Get a list of groupable entity types.
 *
 * Checks to see what entity types have an og_group_ref field.
 *
 * @return array
 *   An array of groupable entites.
 */
function springboard_og_get_grouped_types() {
  $groups_enabled = &drupal_static(__FUNCTION__);
  if (!isset($groups_enabled)) {
    // Get the fields that exist in the bundle.
    foreach (field_info_fields() as $field_name => $field) {
      if ($field_name == 'og_group_ref' && !empty($field['bundles'])) {
        foreach ($field['bundles'] as $entity_type => $bundles) {
          foreach ($bundles as $bundle) {
            $groups_enabled[$entity_type][$bundle][] = $field_name;
          }
        }
      }
    }
  }

  return $groups_enabled;
}

