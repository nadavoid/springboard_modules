<?php

require_once __DIR__ . '/includes/springboard_og.field_groups.inc';
require_once __DIR__ . '/includes/springboard_og.fields.inc';
require_once __DIR__ . '/includes/springboard_og.menu.inc';
require_once __DIR__ . '/includes/springboard_og.rules.inc';
require_once __DIR__ . '/includes/springboard_og.permissions.inc';
require_once __DIR__ . '/includes/springboard_og.pages_default.inc';


/**
 * Implements hook_node_info().
 */
function springboard_og_node_info() {
  $items = array(
    'springboard_group' => array(
      'name' => t('Springboard Group'),
      'base' => 'node_content',
      'description' => '',
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
      'locked' => TRUE,
    ),
  );
  return $items;
}

/**
 * Implements hook_views_api().
 */
function springboard_og_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'springboard_og') . '/includes/views',
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function springboard_og_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "field_group" && $api == "field_group") {
    return array("version" => "1");
  }
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * Extend Class OgSelectionHandler, so that admins can get groups
 * they aren't a member of displayed in the default group selector instead
 * of the "groups you aren't a member of" selector.
 */
function springboard_og_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return "plugins/entityreference/$plugin";
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Change the default text on og_group_ref field deletion confirm page. That is
 * when making an entity un-groupable.
 */
function springboard_og_form_og_ui_field_delete_form_alter(&$form, &$form_state) {
  if ($_GET['destination'] = 'admin/springboard/groups/settings') {
    $form['actions']['cancel']['#markup'] = l(t('cancel'), 'admin/springboard/groups/settings');
    $form['description']['#markup'] = t('All group associations for the @type content type will be deleted. This cannot be undone.', array('@type' => arg(5)));
  }
}

/**
 * Get a list of groupable entity types.
 *
 * Checks to see what entity types have an OG group reference field.
 *
 * @return array
 *   An array of groupable entites.
 */
function springboard_og_get_grouped_types() {
  $groups_enabled = &drupal_static(__FUNCTION__);
  if (!isset($groups_enabled)) {
    // Get the fields that exist in the bundle.
    foreach (field_info_fields() as $field_name => $field) {
      if ($field['type'] == 'entityreference' && $field['settings']['handler'] == 'og_springboard_og' && !empty($field['bundles'])) {
        foreach ($field['bundles'] as $entity_type => $bundles) {
          foreach ($bundles as $bundle) {
            $groups_enabled[$entity_type][$bundle][] = $field_name;
          }
        }
      }
    }
  }
  return $groups_enabled;
}

/**
 * Implements hook_form_node_form_alter().
 */
function springboard_og_form_node_form_alter(&$form, &$form_state) {
  if ($form['#node']->type == 'springboard_group') {
    // Change some of the defaults on the addressfield.
    if (!empty($form['field_sb_group_address'])) {
      $form['field_sb_group_address']['#type'] = 'fieldset';
      $form['field_sb_group_address']['#collapsible'] = TRUE;
      $form['field_sb_group_address']['#collapsed'] = TRUE;
      $form['field_sb_group_address']['#title'] = t('Address');
      $form['field_sb_group_address'][$form['field_sb_group_address']['#language']][0]['#title'] = '';
    }
  }

  // Change the group field from a multiple select to a single select.
  // Doing it here instead of in field config allows us to preserve an
  // unlimited cardinality, which OG basically always assumes is the case.
  // Limiting the cardinality to 1 would cause errors when different users
  // attempt to reassign a node to a different group when it has a membership
  // already assigned by different user, even though the original record in the
  // og_membership table would be removed.
  $fields = og_get_group_audience_fields('node', $form['#node']->type, 'node', 'springboard_group');
  if (!empty($fields)) {
    foreach ($fields as $key => $field) {
      $field_name = $key;
      if ($field_name == 'og_group_ref_' . substr($form['#node']->type, 0, 19)) {
        $form[$field_name]['#type'] = 'fieldset';
        $form[$field_name]['#collapsible'] = TRUE;
        $form[$field_name]['#collapsed'] = FALSE;
        $form[$field_name]['#title'] = variable_get('springboard_og_name', t('Springboard Groups'));
        $form[$field_name][$form[$field_name]['#language']]['#title'] = '';
        $form[$field_name][$form[$field_name]['#language']][0]['default']['#title'] = t('Group');
        $form[$field_name][$form[$field_name]['#language']][0]['default']['#description'] = t('Associate this content with a group.');
        $form[$field_name][$form[$field_name]['#language']][0]['default']['#multiple'] = FALSE;
      }
    }
  }
}


/**
 * Implements hook_field_widget_form_alter().
 *
 * Instead of having a separate "mock" field for "groups you don't belong to"
 * we'll put all options in the main widget for sufficiently permissioned
 * national group admin. Need to do this because we're not allowing
 * multiple selections on the group reference fields.
 *
 * @see OgSpringboardOgSelectionHandler
 * @see og_field_widget_form()
 */
function springboard_og_field_widget_form_alter(&$element, &$form_state, $context) {

  if (isset($context['field']['settings']['handler']) && $context['field']['settings']['handler'] == 'og_springboard_og') {
    // If the og reference field is using our custom selection handler,
    // remove the admin "groups you are not of member of"  field.
    $element['admin']['#access'] = FALSE;
    // Set the value of the default field to the default value of the admin
    // field if there are values present.
    if (!empty($element['admin']['#default_value']) && empty($element['default']['#default_value'])) {
      $element['default']['#default_value'] = $element['admin']['#default_value'];
    }
    $element['admin']['#default_value'] = [];
  }
}

function springboard_og_og_membership_presave(OgMembership $og_membership) {
  // @todo we may want to delete any existing records for an entity in the
  // og_membership table prior to saving a new record, to prevent accidental
  // multiple group assignments.
}