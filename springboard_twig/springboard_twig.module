<?php

/**
 * @file
 * Module file for Springboard Twig.
 */

/**
 * Implements hook_libraries_info().
 *
 * Define the Twig templating library.
 */
function springboard_twig_libraries_info() {
  // A very simple library. No changing APIs (hence, no versions), no variants.
  // Expected to be extracted into 'sites/all/libraries/simple'.
  $libraries['twig'] = array(
    'name' => 'Twig',
    'vendor url' => 'http://twig.sensiolabs.org/',
    'download url' => 'https://github.com/twigphp/Twig/archive/v2.1.0.tar.gz',
    'version arguments' => array(
      'file' => 'CHANGELOG',
      'pattern' => '/(\d+\.\d+\.\d \(\d{4}\-\d{2}\-\d{2}\))/',
      'lines' => 1,
    ),
    'files' => array(
      'php' => array('lib/Twig/Autoloader.php'),
    ),
  );

  return $libraries;
}

/**
 * Generates an informative field to be inserted into forms.
 *
 * @return array
 *   An array of form elements to be added to a form.
 */
function _springboard_twig_info_form_field($type = 'donation_form') {
  $twig_description = array(
    'twig' => array(
      '#type' => 'markup',
      '#prefix' => '<br/>',
      '#markup' => t('You may also use the Twig templating language in your message. The available object variables are !variables. For more information about Twig, visit !url.!breaks', array(
        '!variables' => '<code>node</code>, <code>submission</code>, and <code>donation</code>',
        '!url' => l(t('the Twig project page'), 'http://twig.sensiolabs.org/doc/1.x/', array(
          'attributes' => array(
            'target' => '_blank',
          ),
        )),
        '!breaks' => '<br/><br/>',
      )),
    ),
  );
  $twig_variables = array(
    'Node' => array(
      'nid' => t('The node ID.'),
      'title' => t('The node title.'),
    ),
    'Submission' => array(
      'sid' => t('The submission ID.'),
      'nid' => t('The node ID.'),
      'uid' => t("The user's ID."),
    ),
  );

  if ($type == 'donation_form') {
    $twig_variables['Donation'] = array(
      'did' => t('The donation ID.'),
      'nid' => t('The node ID.'),
      'sid' => t('The submission ID.'),
      'uid' => t("The user's ID."),
      'user' => t('The user object.'),
      'user.name' => t("The user's name."),
      'user.mail' => t("The user's email."),
      'amount' => t('The amount of the donation.'),
      'amount.percent' => t('The amount of the donation as a percantage relative to the goal amount.'),
      'currency' => t('The currency of the donation.'),
      'transaction_date' => t('The transaction date.'),
      'donation' => t('The raw donation data.'),
      'donation.amount' => t('The amount of the donation, from the submission data.'),
      'donation.amount_formatted' => t('The formatted amount, e.g. "$10.00".'),
      'donation.currency' => t('The currency of the donation, e.g. USD, from the submission data.'),
      'donation.currency.symbol' => t('The currency symbol, e.g. $.'),
      'donation.currency.minor_unit' => t('The currencies minor sybmol, e.g. "cent".'),
      'donation.currency.code' => t('The currency code, e.g. USD.'),
      'donation.quantity' => t('The quantity.'),
      'donation.payment_method' => t('The payment method, e.g. "credit".'),
      'donation.payment_fields.credit' => t('Holds the credit data, if the payment_method is credit.'),
      'donation.payment_fields.credit.card_number' => t('The credit card number, if the payment_method is credit.'),
      'donation.payment_fields.credit.card_type' => t('The credit card type, e.g. "Visa", if the payment_method is credit.'),
      'donation.payment_fields.credit.ocd' => t('Boolean value signifying if the donation was used to enroll in One Click Donate.'),
      'donation.payment_fields.credit.card_expiration_month' => t('The credit card expiration month, if the payment_method is credit.'),
      'donation.payment_fields.credit.card_expiration_year' => t('The credit card expiration year, if the payment_method is credit.'),
      'donation.first_name' => t('The first name, from the submission data.'),
      'donation.last_name' => t('The last name, from the submission data.'),
      'donation.mail' => t('The email address, from the submission data.'),
      'donation.address' => t('The street address, from the submission data.'),
      'donation.address_line_2' => t('The street address, line 2, from the submission data.'),
      'donation.city' => t('The city, from the submission data.'),
      'donation.state' => t('The state, from the submission data.'),
      'donation.country' => t('The country, from the submission data.'),
      'donation.zip' => t('The zip code, from the submission data.'),
      'donation.payment_method' => t('The payment method type, from the submission data.'),
      'donation.recurs_monthly' => t('Boolean value, if the donation recurs montly.'),
      'submission_data' => t('The submission data for this donation.'),
      'submission_data.amount' => t('The amount of the donation, from the submission data.'),
      'submission_data.currency' => t('The currency of the donation, e.g. USD, from the submission data.'),
      'submission_data.first_name' => t('The first name, from the submission data.'),
      'submission_data.last_name' => t('The last name, from the submission data.'),
      'submission_data.mail' => t('The email address, from the submission data.'),
      'submission_data.address' => t('The street address, from the submission data.'),
      'submission_data.address_line_2' => t('The street address, line 2, from the submission data.'),
      'submission_data.city' => t('The city, from the submission data.'),
      'submission_data.state' => t('The state, from the submission data.'),
      'submission_data.country' => t('The country, from the submission data.'),
      'submission_data.zip' => t('The zip code, from the submission data.'),
      'submission_data.payment_method' => t('The payment method type, from the submission data.'),
    );
  }

  $header = array(
    array('data' => 'Variable'),
    array('data' => 'Description'),
  );
  $rows = array();
  foreach ($twig_variables as $category => $children) {
    $rows[] = array('<strong>' . $category . '</strong>');
    foreach ($children as $variable_name => $description) {
      $rows[] = array($variable_name, $description);
    }
  }

  $twig_variables_fieldset = array(
    'twig_variables' => array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#title' => t('Twig Variables'),
      'twig_variables_table' => array(
        '#type' => 'markup',
        '#markup' => theme('table', array(
          'header' => $header,
          'rows' => $rows,
        )),
      ),
    ),
  );

  return $twig_description + $twig_variables_fieldset;
}

/**
 * Helper function to process text through Twig.
 *
 * @param string $text
 *   The text to process.
 * @param array $replacements
 *   An array of replacements to use when processing the text.
 *
 * @return string
 *   The processed text.
 */
function _springboard_twig_process_text($text, $replacements) {
  $library_name = 'twig';
  if (($library = libraries_load($library_name)) && !empty($library['installed'])) {
    try {
      Twig_Autoloader::register();
      $loader = new Twig_Loader_Array();
      $twig = new Twig_Environment($loader);
      $twig->addExtension(new Twig_Extension_StringLoader());
      $text = html_entity_decode($text);
      $text = $twig->createTemplate($text)->render($replacements);
    }
    catch (Twig_Error_Syntax $e) {
      drupal_set_message($e->getMessage(), 'error');
    }
    catch (Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
    }
  }
  else {
    $error_message = $library['error message'];
    drupal_set_message($error_message, 'warning');
  }

  return $text;
}

/**
 * For email_wrappers.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds description to email webform to inform user their ability to use Twig in
 * their messages, and which variables are available to them.
 */
function springboard_twig_form_webform_email_edit_form_alter(&$form, &$form_state) {
  // Insert text after the components token field.
  $i = array_search('preview_url', array_keys($form['template']));
  $twig = _springboard_twig_info_form_field($form['#node']->type);
  $form['template'] = array_slice($form['template'], 0, $i, TRUE) + $twig + array_slice($form['template'], $i, NULL, TRUE);
}

/**
 * Implements hook_email_wrappers_email_body_messages_alter().
 *
 * Process the email messages with the Twig templating language.
 */
function springboard_twig_email_wrappers_email_body_messages_alter(&$data) {
  if (empty($data['message']['params']['donation'])) {
    $data['message']['params']['donation'] = fundraiser_donation_get_donation($data['message']['params']['submission']->sid);
  }
  $replacements = array(
    'donation' => $data['message']['params']['donation'],
    'node' => $data['message']['params']['node'],
    'submission' => $data['message']['params']['submission'],
  );
  $data['html_raw'] = _springboard_twig_process_text($data['html_raw'], $replacements);
  $data['text_raw'] = _springboard_twig_process_text($data['text_raw'], $replacements);
}

/**
 * For fundraiser_webform.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds description to email webform to inform user their ability to use Twig in
 * their messages, and which variables are available to them.
 */
function springboard_twig_form_webform_configure_form_alter(&$form, &$form_state) {
  if (empty($form['submission']['confirmation'])) {
    return;
  }

  // Insert text after the components token field.
  $i = array_search('confirmation', array_keys($form['submission']));
  $twig = _springboard_twig_info_form_field($form['#node']->type);
  $form['submission'] = array_slice($form['submission'], 0, $i + 1, TRUE) + $twig + array_slice($form['submission'], $i + 1, NULL, TRUE);
}

/**
 * Implements hook_webform_confirmations_confirmation_message_alter().
 */
function springboard_twig_webform_confirmations_confirmation_message_alter(&$confirmation_message, $vars) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $replacements = array(
    'node' => $vars['node'],
    'submission' => webform_get_submission($vars['node']->nid, $vars['sid']),
  );

  $type = $vars['node']->type;
  if ($type == 'donation_form') {
    $replacements += array(
      'donation' => fundraiser_donation_get_donation($vars['sid']),
    );
  }

  $confirmation_message = _springboard_twig_process_text($confirmation_message, $replacements);
}
