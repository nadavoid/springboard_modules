<?php

/**
* Implements hook_menu().
*/
function sba_target_search_menu() {
// Committee Search Selector autocomplete path.
$items['target-search/committee/autocomplete'] = array(
'page callback' => '_sba_target_search_committee_autocomplete',
'access arguments' => array('add target to action'),
'type' => MENU_CALLBACK,
);

return $items;
}

/**
 * Implements hook_views_api().
 */
function sba_target_search_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'sba_target_search') . '/includes',
  );
}

/**
 * Autocomplete callback to populate committee list dropdown.
 *
 * @param string $name
 *   The value of the autocomplete textfield.
 * @param string $state
 *   The value of the state field.
 * @param string $chamber
 *   The value of the chamber field.
 */
function _sba_target_search_committee_autocomplete($name, $state, $chamber) {
  $matches = array();

  // Retrieve committee list from cache or via API call if not cached.
  $api_call = springboard_advocacy_api_call();
  $committee_list = $api_call->getCommittees();

  // Grep the results using patterns based on form input.
  $name_pattern = '/' . $name . '/i';
  $state_pattern = '/\(' . $state . '\)/i';
  $chamber_pattern = '/\(' . $chamber . '\)/i';

  if (!empty($committee_list)) {
    $results = preg_grep($name_pattern, $committee_list);
    if ($state != 'All') {
      $results = preg_grep($state_pattern, $results);
    }
    if ($chamber != 'All') {
      $results = preg_grep($chamber_pattern, $results);
    }
    if (is_array($results)) {
      $num = count($results);
      // Limit the displayed results (there are 7,000+ committees)
      // and create a tally message.
      $results = array_slice($results, 0, 5);
      $rest = $num - 5;
      if ($rest > 0) {
        $results['message'] = 'Plus ' . $rest . ' more. Try narrowing your search with more letters, words or filters';
      }
      else {
        // Prevent the autocompelte js from bolding the last suggestion.
        $results['message'] = '';
      }
      foreach ($results as $key => $row) {
        $matches[$row] = $row;
      }
    }
  }
  drupal_json_output($matches);
}

/**
 * Implements hook_theme().
 */
function sba_target_search_theme() {
  return array(
    'views_exposed_form' => array(
      'template' => 'templates/views-exposed-form--targets-block-3',
      'render element' => 'form',
    ),
    'views_view' => array(
      'template' => 'templates/views-view--targets-block-3',
      'render element' => 'form',
    ),
  );
}


/**
 * Implements hook_preprocess_hook().
 *
 * Override springboard theme's conversion of button text.
 */
function sba_target_search_preprocess_views_exposed_form(&$vars, $hook) {
  if (isset($vars['theme_hook_suggestion']) &&  $vars['theme_hook_suggestion'] == 'views_exposed_form__targets__block_3') {
    unset($vars['form']['submit']['#printed']);
    $vars['target_button'] = drupal_render($vars['form']['submit']);
  }
}


/**
 * Implements hook_preprocess_views_view_table().
 *
 * Change the table output of the Target search when only custom groups are searched.
 */

function sba_target_search_preprocess_views_view_table(&$vars) {
  $view = $vars['view'];
  $fields = &$view->field;
  $columns = $view->style_plugin->options['columns'];
  $classes = $view->filter['search_class_name']->value;
  if($view->name == 'targets' && $view->current_display == 'block_3' && in_array('Group', $classes)) {
    $group_fields = array('last_name', 'group_name', 'target_actions');
    foreach($vars['header'] as $key => $head) {
      if(!in_array($key, $group_fields)) {
        unset($vars['header'][$key]);

      }
    }
    foreach($columns as $key => $column) {
      if(!in_array($key, $group_fields)) {
        // prevent headers from being rebuilt in springboard_advocacy_preprocess_views_view_table().
        unset($columns[$key]);
      }
    }
    foreach($fields as $key=> $field) {
      if(!in_array($key, $group_fields)) {
        unset($fields[$key]);
      }
    }
    $vars['view']->style_plugin->options['columns'] = $columns;
    $vars['view']->style_options['columns'] = $columns;
    $vars['options']['columns'] = $columns;
    foreach($vars['rows'] as $key => $row) {
      foreach($row as $field_name => $value) {
        if(!in_array($field_name, $group_fields)) {
          unset($vars['rows'][$key][$field_name]);
        }
      }
    }

    $header = $vars['header'];
    $rows = $vars['rows'];
  }

}


/**
 * Helper function. Adds Target Search-related functionality to any form.
 *
 * @param $form
 * @param $form_state
 * @param string $entity
 * @return mixed
 *
 */
function sba_target_search_add_target_search_form($form, &$form_state, $entity = '') {
  $form['data']['#tree'] = TRUE;
  $recipients = '';

  // If we are using a Drupal entity that saves the UI json string locally, we
  // can just use that string directly
  if(isset($entity->data['recipients'])) {
    $recipients = str_replace('"', '&quot;', $entity->data['recipients']);
  }
  // Otherwise, a plain group entity needs its attributes converted to the json
  // string format expected in the UI.
  else if(isset($entity->targets)) {
    $recipients = sba_target_search_convert_recipients($entity);
  }

  $form['data']['recipients'] = array(
    '#type' => 'hidden',
    '#default_value' => $recipients,
  );

  $form['target_recipients'] = array (
      '#id' => 'springboard-advocacy-target-recipients',
      '#type' => 'markup',
      '#markup' => '<div id="springboard-advocacy-target-recipients"><h3>Message Targets</h3><div class = "sba-charcount-status"></div><div class = "sba-target-status"></div><div class = "sba-message-status"></div><div id="springboard-advocacy-target-recipients-content" class="clearfix"></div></div>',
      '#prefix' => '<div id="springboard-advocacy-target-recipients-container"><div class="inner">',
      '#suffix' => '</div></div>',
      '#weight' => 99,
    );

  $form['#suffix'] .= '<div id="springboard-advocacy-find-targets-container"><div id="springboard-advocacy-find-targets"><h3>Find Targets</h3>' . views_embed_view('targets', 'block_3') . '</div></div>';

  $form['#attached']['css'][] = drupal_get_path('module', 'sba_target_search') . '/css/sba_target_search.css';
  $form['#attached']['js'][] = drupal_get_path('module', 'sba_target_search') . '/js/sba_target_search.js';
  $form['#attributes']['class'][] = 'sba_target_search_parent_form';

  return $form;
}

/**
 * @TODO comment this
 * @param $group
 * @return string
 */

function sba_target_search_convert_recipients($group) {
  $recipients = array();
  foreach($group->chambers as $chamber) {
    $recipient = array();
    foreach($chamber as $field_name => $value) {
      if($value != '') {
        $recipient[$field_name] = $value;
      }
    }
    $recipients[] = $recipient;
  }
  foreach($group->executives as $exec) {

  }
  foreach($group->targets as $target) {
    //$api_call = springboard_advocacy_api_call();
    //$response = $api_call->invokeClientMethod('', $target->target_id);
    $recipients[] = array(
      'id' => $target->target_id,
      'type' => 'Legislator', // from response, choose whether type is Legislator or Target
      'first' => 'some',
      'last' => 'target',
      'sal' => '',
      'twitter' => '',
      'facebook' => '',
      'org' => '',
      'title' => '',
      'state' => '',
      'district' => '',
      'party' => '',
    );

  }
  foreach($group->groups as $child_group) {
    $recipients[] = array(
      'group_id' => $child_group->target_group_group_id,
      'name' => 'group name here', // @TODO this used to be included with the group object
    );
  }

  return json_encode($recipients);
}